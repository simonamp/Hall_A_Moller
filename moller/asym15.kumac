MACRO asym15 id0=-1 nlun=0 run=0 ncha=-1 n1=1 n2=999999 nevadc=-1 angl=0.0 anpow=0.76747 ptar=0.08036 norm=1 norbcm=1 nocut=0 _
            coil=0 gate=0.033 mxdiff=50 clear=1 delay=0 heladc=0 nococut=0 nosubbg=0 tauto=0

* Modified 12/15/15 For "brute force" target ptar=0.08036 Fe(99.85%, 300K, 3Tl)
* ptar=0.08043 (3.5<-->3.9T) 
* LED_2015
* --- id0 histogram offset
* --- nlun NTUPLE name (lun21 or lll - for the chain)0
* --- or run number
* --- ncha > 0 - number of bins, <0 - automatic = 0 - no hist
* --- n1,n2 - the range of the scaler cycles to accept
* --- nevadc - the numbers of adc triggers per window to select (<0 - all)
* --- nococut - >0 do not make coincidence counting rate cut (for parasitic beam studies)
* --- nocut  - make no cuts on the cycles
* --- angl   - target angle
* --- anpow  - Moller analysing power
* --- ptar   - target polarizarion
* --- tauto  - >0 - automatically find which target foil is used and retrieve its polarization
* --- norm   - normalization, =0 - scaler, =1 - BCM
* --- coil   - polarity of the Helmholz coil
* --- gate   - helicity gate length in sec
* --- mxdiff - max difference between two scalers
* --- clear  >0 - erase old histograms for a new run
* --- delay  > =-1 - automatical evaluation, =0 - forced (no delay), =9 - delay
* --- heladc>0 - take the helicity from ADCs 
* --- nosubbg >0 - do not subtract the accidenntals
*

mess  run=[run] delay=[delay] nevadc=[nevadc] heladc=[heladc] anpow=[anpow]
   LRECL=4096



* if [run]>14670 then
*   gate=0.008
*   if [run]>14838 then
*	 gate=0.0008
*        nevadc=0
*        dtick=4.
*         
*   endif	
* endif
 mess Analyzing Power=[anpow]

 zone 2 3
* zone 2 2
 opt liny
* mess delay=[delay]
 exec run run=[run]

 if $VDIM(ichis,1)<10 then
   ve/cr ichis(10) i
 endif
 ve/in ichis(1:8) 1 2 3 4 5 6 12 15
 if $VDIM(nnlim,1)<2 then
   ve/cr nnlim(2) i
 endif
 ve/in nnlim [n1] [n2]


 if [run]<1 then
   mess Error in asym15.kumac : run number [run] is out of range
   exitm
 endif

*  Load the settings data
 mess  Find the settings for run=[run]
 exec get_settings_10 run=[run]
 nl=$VLEN(run_sett,1)
 if [nl]<1 then
   mess Setting data have not been found. Exiting...
   exitm
 endif  

 hcoil=run_sett(79)
 hcoil=[hcoil]
 itarg=run_sett(101)
 bpm01x=run_sett(20)
 bpm01y=run_sett(21)
 mess Target=[itarg], Ptar=[ptar], hcoil=[hcoil]A, BPMO1x=[bpm01x], BPM01y=[bpm01y] 

 if $VDIM(par5)<1 then
   ve/cr par5(10) r
 endif
 delay1=[delay]-1
**** ##############################
 delay1=0
 exec run_scal10 run=[run] delay=[delay1] 
 lunn=tlun(1)
 1dh 101 'asym Calorimeter+Aperture' 200 -0.1 0.1
* 1dh 101 'asym Calorimeter+Aperture' 200  0.0 0.1
* 1dh 101 'asym Calorimeter+Aperture' 200  -0.05  0.15
 nt/pl //lun[lunn]/1.(a_asymm10.f(3,4,1,0,0,0,0)) ifzug=0 -101
 h/fit 101 g ! 0 par5
 asym=$HINFO(101,'MEAN')
 mess asym=[asym]
 1dh 102 'asym Calorimeter' 200 -0.1 0.1
* 1dh 102 'asym Calorimeter' 200   0.0 0.1
* 1dh 102 'asym Calorimeter' 200  -0.05  0.15
 nt/pl //lun[lunn]/1.(a_asymm10.f(6,4,1,0,0,0,0)) ifzug=0 -102
 h/fit 102 g ! 0 par5
 a_cal=$HINFO(102,'MEAN')
 mess asym calorimeter=[a_cal]
* wait
* zone 2 2
* nt/pl //lun[lunn]/1.(a_asymm10.f(3,4,1,0,0,0,0)) ifzug=0 -101
* nt/pl //lun[lunn]/1.(a_asymm10.f(6,4,1,0,0,0,0)) ifzug=0 -102

 if $VDIM(bcmlin)<3 then
    ve/cr bcmlin(3) r
 endif
  
* BCM linearity (x10)
* ve/cr bcmlin(3) r 1977. 1.
* ve/cr bcmlin(3) r 988. 1.
* New BCM - 09 Oct 98

* ve/cr bcmlin(3) r 1356 0.78702 0.29969E-5
* New BCM - 20 Dec 98
* ve/cr bcmlin(3) r 1821. 0.9606 -0.58E-6
* New BCM - 21 Jan 99
* ve/cr bcmlin(3) r -51. 1.073 -0.6E-5
*    19 Feb 99
* ve/cr bcmlin(3) r 77. 0.99629 0.
*    27 Sep 99
* ve/in bcmlin(1:3) -12. 1.033 0.
 ve/in bcmlin(1:3) -10. 1.000 0.
*    15 Sep 2001
 ve/in bcmlin(1:3) 148. 1.000 0.
*    17 Feb 2002
 ve/in bcmlin(1:3) -164.5 1.000 0.
* ve/in bcmlin(1:3)  -29.84 1.000 0.9239E-5
 ve/in bcmlin(1:3)  -0.99466 1.000 2.771E-4
*     06 April 2010
 ve/in bcmlin(1:3)  0.0 1.000 0.0

 if $VDIM(acuts)<20 then
   ve/cr acuts(20) r
 endif
 ve/in acuts(1) [mxdiff]

 run0=0
 if $VDIM(irun,1)>0 then
   run0=irun(1)
 endif
 if [nlun]=0 then
   exec getrun run=[run] lun=[lun]
   lun=ilun(1)
   run=irun(1)
   kty=irty(1)

   if [lun]=0 then
     mess Abort ...
     exitm
   endif
   nlun=lun//[lun]
 else
   run=[nlun]
 endif
 if [id0]=-1 then
   id0=[run]*100
   mess Set id0 to [id0]
 endif
*
*--- Clear the old histograms
*
 if [clear]>0 .AND. [run] .NE. [run0] then
   cd //pawc
   h/del 0
 endif   

 tit='Moeller run='//[run]
 titl [tit]

 mxasym=50
 if $VDIM(casym)<[mxasym] then

   ve/cr  casym([mxasym]) r
   ve/cr ecasym([mxasym]) r
   ve/cr  rasym([mxasym]) r
   ve/cr erasym([mxasym]) r
   ve/cr  fasym([mxasym]) r
   ve/cr efasym([mxasym]) r
   ve/cr  nasym([mxasym]) i
   ve/cr coasym([mxasym]) r

   fnam='inc/v_asym.inc'
   if $FEXIST([fnam]) then
     shell rm -f [fnam]
   endif 
   fmess 'C == Vectors of asymmetry and counting rates' [fnam]
   inam='      INTEGER MXASYMV'
   fmess [inam] [fnam]
   inam='      PARAMETER (MXASYMVC='//[mxasym]//')'
   fmess [inam] [fnam]
   inam='      VECTOR CASYM('//[mxasym]//'),ECASYM('//[mxasym]//')'
   fmess [inam] [fnam]
   inam='      VECTOR RASYM('//[mxasym]//'),ERASYM('//[mxasym]//')'
   fmess [inam] [fnam]
   inam='      VECTOR FASYM('//[mxasym]//'),EFASYM('//[mxasym]//')'
   fmess [inam] [fnam]
   inam='      VECTOR NASYM('//[mxasym]//')'
   fmess [inam] [fnam]
   inam='      VECTOR COASYM('//[mxasym]//')'
   fmess [inam] [fnam]
 else
   ve/in  casym [mxasym]*0
   ve/in ecasym [mxasym]*0
   ve/in  rasym [mxasym]*0
   ve/in erasym [mxasym]*0
   ve/in  fasym [mxasym]*0
   ve/in efasym [mxasym]*0
   ve/in  nasym [mxasym]*0
   ve/in coasym [mxasym]*0
 endif

 angl=$RSIGMA([angl])
 ve/in coasym(1) [angl]   
 ve/in coasym(2) [anpow]   
 ve/in coasym(3) [ptar]   
 ve/in coasym(4) [norm]   
 ve/in coasym(5) [norbcm]   
 ve/in coasym(6) [hcoil]   
 ve/in coasym(7) [gate]   
 ve/in coasym(8) [kty]  

 exec add_v_run irun=[run]
 nr=$VDIM(krunpnt,1)
 if [nr]<[run] then
   mess Error in asym10.kumac : no krunpnt [nr] for run=[run]
   exitm
 endif
 krun=krunpnt([run])
 if [krun]<1 .OR. $VDIM(resrun,2)<[krun] then
   mess Error in asym10.kumac : no space in resrun for run=[run]
   exitm
 endif


 if $VDIM(limsca,2)<32 then
   ve/cr limsca(2,32) i
 endif
 do i=1,32
   ve/in limsca(1,[i]) 9999999
   ve/in limsca(2,[i]) 0
 enddo

*  nt/pl //[nlun]/1.isca(11) nsca>0.and.asymlim.f([nocut])>0.
 nt/pl //[nlun]/1.asymcyc.f(0) 
 
 id=[id0]

 delay1=[delay]
 if [delay]=-1 then
   delay1=0
 endif

 if $VDIM(naspar,1)<32 then
   ve/cr naspar(32) i 
 endif
 ve/in naspar(1:8) [id] [nevadc] [norm] [norbcm] [nocut] [delay1] [kty] [nosubbg]
 nt/loop //[nlun]/1 asymmet10.f([angl],[anpow],[ptar],[heladc],[nococut])>0.  

 *  Find the right helicity gate using the Clock (timer) = 100kHz
 av=casym(12) 
* gate1=$sigma([av]/92200.)
 gate1=$sigma([av]/100000.)

 mess Calculated gate=[gate1] sec    Preset gate=[gate] sec
  
 if $SIGMA(ABS([gate]-0.033))<0.005 then
   gate1=0.033
 elseif $SIGMA(ABS([gate]-0.5))<0.05 then
   gate1=0.5
 elseif $SIGMA(ABS([gate]-1.))<0.05 then
   gate1=1.
 elseif $SIGMA(ABS([gate]-0.004))<0.0003 then
   gate1=0.00407
 elseif $SIGMA(ABS([gate]-0.008))<0.0005 then
   gate1=0.00823
 elseif $SIGMA(ABS([gate]-0.001))<0.0003 then
   gate1=0.0008

 endif
 mess Gate used=[gate1] sec 
 gate=[gate1]
 

 if [ncha]<0 then
   ncha=$HINFO(1000000,'XMAX')
*   ncha=$HINFO(1000000,'ENTRIES')
   ncha=[ncha]+10
 endif

 tith=[tit]//' raw asymmetry'
 x2=[ncha]+1
 if [ncha]>0 then
   if $HEXIST([id])>0 then
     h/del [id]
   endif
   1dh [id] [tith] [ncha] 1 [x2]
   tith=[tit]//' isca(11) increments'
   id1=[id0]+20
*   h/cop [id] [id1] [tith] 
   tith=[tit]//' adc events'
   id1=[id0]+21
*   h/cop [id] [id1] [tith]
 endif

 nx3=1
 xmn3=0.
 xmx3=1.
 nx5=1
 xmn5=0.
 xmx5=1.
 nx12=1
 xmn12=0.
 xmx12=1.

 tith=[tit]//' counting rates'
 do i=1,10
   k=ichis([i])
   if [k]>0 then
*---        Get the limits
*	
     l1=limsca(1,[k])     
     l2=limsca(2,[k])
     xmn=$SIGMA(INT([l1]/200))
     xmn=[xmn]*200
     xmx=$SIGMA(INT([l2]/200))     
     xmx=([xmx]+1)*200
     if [norbcm]>0 then
       if [k]=5 then
          a=bcmlin(1)
          b=bcmlin(2)
*          xmn=[a]+[xmn]*[b]
*          xmx=[a]+[xmx]*[b]
       endif
     endif
     nx=[xmx]-[xmn]
     nx=$SIGMA(MIN([nx],500))
     nx=$SIGMA(MAX([nx],20))
*     mess try [i] [k]
*     mess chan=[k] nx,xmin,xmax=[nx],[xmn],[xmx]
     if [k]=3 then
       nx3=200
       xmn3=[xmn]
       xmx3=[xmx]
     elseif [k]=5 then
       nx5=200
       xmn5=[xmn]
       xmx5=[xmx]
     elseif [k]=12 then
       nx12=[nx]
       xmn12=[xmn]+100
       xmx12=[xmx]
     endif
*     mess chan=[k] nx,xmin,xmax=[nx],[xmn],[xmx]

     id1=[id0]+[k]
     if $HEXIST([id1])>0 then
       h/del [id1]
     endif
* xmx=15000
*  xmn=2000
*  xmx=3500
*  nx=150
     1dh [id1] [tith] [nx] [xmn] [xmx]
     id1=[id0]+[k]+60
     if $HEXIST([id1])>0 then
       h/del [id1]
     endif
     1dh [id1] [tith] [nx] [xmn] [xmx]
     id1=[id0]+[k]+80
     if $HEXIST([id1])>0 then
       h/del [id1]
     endif
     1dh [id1] [tith] [nx] [xmn] [xmx]
     if [k]=3 then
        id1=[id0]+88
        if $HEXIST([id1])>0 then
          h/del [id1]
        endif
*        mess chan=[k] nx,xmin,xmax=[nx],[xmn],[xmx]
        2dh [id1] 'coin H+ vs coin H-' [nx] [xmn] [xmx] [nx] [xmn] [xmx] 510.
     endif
     if [ncha]>0 then
       id1=[id0]+[k]+30
       if $HEXIST([id1])>0 then
         h/del [id1]
       endif
       1dh [id1] [tith] [ncha] 1 [ncha]
       if [i]=1 then
         id1=[id0]+30
         tith1=[tit]//' helicity signals'
         if $HEXIST([id1])>0 then
            h/del [id1]
         endif
         1dh [id1] [tith1] [ncha] 1 [ncha]
         id1=[id0]+53
         tith1=[tit]//' ticks to the previous cycle'
         if $HEXIST([id1])>0 then
            h/del [id1]
         endif
         1dh [id1] [tith1] [ncha] 1 [ncha]
	 id1=[id0]+99
         tith1=[tit]//' jhelcyc'
         if $HEXIST([id1])>0 then
            h/del [id1]
         endif
         1dh [id1] [tith1] [ncha] 1 [ncha]
       endif
     endif 
   endif 
 enddo


 id1=[id0]+25
 if $HEXIST([id1])>0 then
   h/del [id1]
 endif
 2dh [id1] 'Coinc. vs BCM  ' [nx5] [xmn5] [xmx5] [nx3] [xmn3] [xmx3] 1024.
 id1=[id0]+26
 if $HEXIST([id1])>0 then
   h/del [id1]
 endif
 2dh [id1] 'Coinc. vs clock' [nx12] [xmn12] [xmx12] [nx3] [xmn3] [xmx3] 1024.

 id1=[id0]+50
 if $HEXIST([id1])>0 then
   h/del [id1]
 endif
 1dh [id1] 'Ticks between cycles' 200 0. 200. 
 id1=[id0]+51
 if $HEXIST([id1])>0 then
   h/del [id1]
 endif
 1dh [id1] 'Ticks between the last ADC and scalers' 1000 0. 1000. 
 id1=[id0]+52
 if $HEXIST([id1])>0 then
   h/del [id1]
 endif
 1dh [id1] 'Ticks between the 1-st and last ADC' 20 0. 20. 

 do i=1,6
   id1=$SIGMA([id0]+53+[i])
   ttn='Diff of 2 scalers, chan '//[i]
   if $HEXIST([id1])>0 then
     h/del [id1]
   endif
   1dh [id1] [ttn] 400 -200. 200. 0.
 enddo

 delay1=[delay]
 if [delay]=-1 then
   delay1=0
   p=fasym(1)
   p=$SIGMA(ABS([p]))
   mess p=[p]
   if [p]<0.005 then
     mess *** Try the delayed mode. With non-delayed mode the 1-st arm raw asymmetry is [p]
     delay1=9
   else
     mess *** Use the NON-delayed mode. With non-delayed mode the 1-st arm raw asymmetry is [p]
   endif
   mess Delay=[delay1]
 endif
 mess Delay=[delay1]
 ve/in naspar(1:8) [id] [nevadc] [norm] [norbcm] [nocut] [delay1] [kty] [nosubbg]
 ve/in nasym(1:50) 50*0
 nt/loop //[nlun]/1 asymmet10.f([angl],[anpow],[ptar],[heladc],[nococut])>0.

 h/pl [id](1:[ncha])
 nfl=$SIGMA([nocut]+[norbcm]*10+[norm]+100+[nevadc]*1000)

** ==    Copy the data to a file
* mess nadct=[nadct]
* fun='irput_pol.f('//[run]//','//[gate]//','//[nfl]//',1)'
* icyc=$ICALL([fun])
* mess RZ Output record cycle= [icyc]  

 mess ' Cycles lost due to various reasons: '
 ve/pri nasym(3:14)
 
 call asym_rend.f([run],1)
 lnn=krunpnt([run])
 fctr=consrun(9,[lnn])

 if $VDIM(asymv)<1 then
   ve/cr asymv(100) r
 endif
 ve/in asymv([lnn]) [asym]

 if $VDIM(resv)<1 then
   ve/cr resv(100) r

 endif

* New beam polarization sign convention:
* Hcoil "+" --> Bz "+" --> Pz(target) "-"
    if [hcoil]>0. then
      res=[fctr]*[asym]*100.
      res1=[fctr]*[a_cal]*100.
    else
      res=-1.*[fctr]*[asym]*100.
      res1=-1.*[fctr]*[a_cal]*100.
    endif

* if [run]>14620 then
*  anpow=0.7685
*  mess *** Analyzing Power=0.7685,  Target Pol.=[ptar]
* endif
 ve/in resv([lnn]) [res]
  if $VDIM(rest)<1 then
    ve/cr rest(7) r
  endif
 eres=100.*eresrun(63,[lnn])
 mess Factor=[fctr] 
 mess Asymmetry(Calorimeter+Aperture)=[asym] 
 mess Asymmetry (Calorimeter only)=[a_cal]
 mess Polarization (Calorimeter)=[res1]
 mess Polarization(Calorimeter+Aperture)=[res]+/-[eres]
 ve/in rest [run] [fctr] [a_cal] [asym] [res1] [res]  [eres]
 ve/write  rest(1),rest(2),rest(3),rest(4),rest(5),rest(6),rest(7) res_tmp.dat (F7.0,F7.3,2F11.7,3F9.4)
 shell cat res_tmp.dat >> res.dat

 if [run]<14537 then
 call prunpri.f(11000,16000)
 else 
 call prun10.f(14500,17000)
 endif

 zone

 exitm

RETURN

